// <auto-generated />
using System;
using EasyCommerce.Server.Shared;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EasyCommerce.Server.Shared.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220817165611_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EasyCommerce.Server.Shared.Persistence.Entities.AddressEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressDetail")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<Guid?>("CustomerId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("CustomerId");

                    b.HasIndex(new[] { "AddressName", "CustomerId" }, "Unique_Address")
                        .IsUnique();

                    b.ToTable("Address");
                });

            modelBuilder.Entity("EasyCommerce.Server.Shared.Persistence.Entities.CargoCompanyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<decimal>("CargoPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebSite")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.ToTable("CargoCompanies");
                });

            modelBuilder.Entity("EasyCommerce.Server.Shared.Persistence.Entities.CartEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<Guid?>("CustomerId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Open")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("EasyCommerce.Server.Shared.Persistence.Entities.CategoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgSrc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeyWords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("ParentId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("723de3b8-6c07-4e8c-b1fc-184b482d9c4d"),
                            Available = true,
                            Description = "test 0",
                            ImgSrc = "test 0",
                            KeyWords = "test 0",
                            Title = "Main -> 0 Category"
                        },
                        new
                        {
                            Id = new Guid("7cf92a91-ba8d-495d-a1fa-2a6fad2012a8"),
                            Available = true,
                            Description = "test 1",
                            ImgSrc = "test 1",
                            KeyWords = "test 1",
                            ParentId = new Guid("723de3b8-6c07-4e8c-b1fc-184b482d9c4d"),
                            Title = "Sub Category"
                        },
                        new
                        {
                            Id = new Guid("0de9d83e-5e4c-4bd1-8ef1-2d4e32f921bc"),
                            Available = true,
                            Description = "test 2",
                            ImgSrc = "test 2",
                            KeyWords = "test 2",
                            ParentId = new Guid("7cf92a91-ba8d-495d-a1fa-2a6fad2012a8"),
                            Title = "Sub -> 0 Category"
                        },
                        new
                        {
                            Id = new Guid("5ed874e6-7151-4cc9-a925-dd249e3a4881"),
                            Available = true,
                            Description = "test 32",
                            ImgSrc = "test 3",
                            KeyWords = "test 3",
                            ParentId = new Guid("0de9d83e-5e4c-4bd1-8ef1-2d4e32f921bc"),
                            Title = "Sub -> 1 Category"
                        },
                        new
                        {
                            Id = new Guid("723de3b8-6c07-4e8c-b1fc-1844482d9c4d"),
                            Available = true,
                            Description = "test 0",
                            ImgSrc = "test 0",
                            KeyWords = "test 0",
                            Title = "Main -> 1 Category"
                        },
                        new
                        {
                            Id = new Guid("240f393a-1635-478d-8c89-70326d1ee533"),
                            Available = true,
                            Description = "test 1",
                            ImgSrc = "test 1",
                            KeyWords = "test 1",
                            ParentId = new Guid("723de3b8-6c07-4e8c-b1fc-1844482d9c4d"),
                            Title = "Sub Category / Main 1"
                        },
                        new
                        {
                            Id = new Guid("35286247-b1ea-4e7e-88fb-a64ce16230ac"),
                            Available = true,
                            Description = "test 2",
                            ImgSrc = "test 2",
                            KeyWords = "test 2",
                            ParentId = new Guid("240f393a-1635-478d-8c89-70326d1ee533"),
                            Title = "Sub -> 0 Category / Main 1"
                        });
                });

            modelBuilder.Entity("EasyCommerce.Server.Shared.Persistence.Entities.CreditCardEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Cvv")
                        .HasColumnType("int");

                    b.Property<int>("ExpMonth")
                        .HasColumnType("int");

                    b.Property<int>("ExpYears")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex(new[] { "CustomerId", "Number" }, "Unique_CreditCard")
                        .IsUnique();

                    b.ToTable("CreditCards");

                    b.HasData(
                        new
                        {
                            Id = new Guid("da36a422-efa1-4900-9fe4-faa9e9af1c9b"),
                            CustomerId = new Guid("8a270105-a039-45b0-90e9-62e6886894e2"),
                            Cvv = 151,
                            ExpMonth = 12,
                            ExpYears = 25,
                            Name = "Save card 1",
                            Number = "5400360000000003"
                        });
                });

            modelBuilder.Entity("EasyCommerce.Server.Shared.Persistence.Entities.CustomerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a270105-a039-45b0-90e9-62e6886894e2"),
                            Available = true,
                            Email = "akman.hazar.fatih@gmail.com",
                            FirstName = "Hazar Fatih",
                            IdentityNumber = "30025022756",
                            LastName = "Akman",
                            Password = "123",
                            PhoneNumber = "5536803185"
                        });
                });

            modelBuilder.Entity("EasyCommerce.Server.Shared.Persistence.Entities.OrderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CargoCompanyId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CargoFollowNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CartId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<Guid?>("CustomerId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("GaveToCargoDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("AddressId");

                    b.HasIndex("CargoCompanyId");

                    b.HasIndex(new[] { "CustomerId", "CartId", "AddressId", "CargoCompanyId" }, "Unique_Order")
                        .IsUnique()
                        .HasFilter("[CustomerId] IS NOT NULL AND [CartId] IS NOT NULL AND [AddressId] IS NOT NULL AND [CargoCompanyId] IS NOT NULL");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("EasyCommerce.Server.Shared.Persistence.Entities.PriceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<double>("DiscountValue")
                        .HasColumnType("float");

                    b.Property<bool>("IsValidPrice")
                        .HasColumnType("bit");

                    b.Property<int>("PriceType")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProductId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SaleChannel")
                        .HasColumnType("int");

                    b.Property<decimal>("TaxFreePrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid?>("TaxId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("TaxId");

                    b.HasIndex(new[] { "ProductId", "TaxId", "TaxFreePrice", "PriceType" }, "Unique_Price")
                        .IsUnique();

                    b.ToTable("Prices");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aba0000f-eb0b-4aeb-923e-0f5f9ccfa989"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountValue = 8.0,
                            IsValidPrice = true,
                            PriceType = 2,
                            ProductId = new Guid("0ccc0e7e-bdec-4e75-b9b3-aa831952311d"),
                            SaleChannel = 0,
                            TaxFreePrice = 20.5m,
                            TaxId = new Guid("ea730e99-db32-42a2-9a2e-36e10fac7f92")
                        },
                        new
                        {
                            Id = new Guid("5d8e7a2a-88a4-4748-a41d-cbcb39286e70"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountValue = 0.0,
                            IsValidPrice = false,
                            PriceType = 3,
                            ProductId = new Guid("0ccc0e7e-bdec-4e75-b9b3-aa831952311d"),
                            SaleChannel = 0,
                            TaxFreePrice = 20.5m,
                            TaxId = new Guid("ea730e99-db32-42a2-9a2e-36e10fac7f92")
                        });
                });

            modelBuilder.Entity("EasyCommerce.Server.Shared.Persistence.Entities.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CategoryId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgSrc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeyWords")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0ccc0e7e-bdec-4e75-b9b3-aa831952311d"),
                            Available = false,
                            Barcode = "1",
                            CategoryId = new Guid("7cf92a91-ba8d-495d-a1fa-2a6fad2012a8"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "test",
                            ImgSrc = "test",
                            KeyWords = "test",
                            Stock = 10,
                            Title = "Product 1"
                        });
                });

            modelBuilder.Entity("EasyCommerce.Server.Shared.Persistence.Entities.SettingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<decimal>("Decimal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("Double")
                        .HasColumnType("float");

                    b.Property<int>("Integer")
                        .HasColumnType("int");

                    b.Property<string>("PrefixKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("String")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("EasyCommerce.Server.Shared.Persistence.Entities.TaxEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Percent")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.ToTable("Taxes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ea730e99-db32-42a2-9a2e-36e10fac7f92"),
                            Name = "standard tax",
                            Percent = 18.0
                        });
                });

            modelBuilder.Entity("EasyCommerce.Server.Shared.Persistence.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApplicationRolesUser")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5b645a88-9509-4a45-a0a6-b5ee24f5785f"),
                            ApplicationRolesUser = 3,
                            Email = "admin@gmail.com",
                            FirstName = "Admin",
                            LastName = "Easy Commerce",
                            Password = "Admin123!",
                            Pin = "1"
                        });
                });

            modelBuilder.Entity("EasyCommerce.Server.Shared.Persistence.Entities.AddressEntity", b =>
                {
                    b.HasOne("EasyCommerce.Server.Shared.Persistence.Entities.CustomerEntity", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("EasyCommerce.Server.Shared.Persistence.Entities.CartEntity", b =>
                {
                    b.HasOne("EasyCommerce.Server.Shared.Persistence.Entities.CustomerEntity", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyCommerce.Server.Shared.Persistence.Entities.OrderEntity", "Order")
                        .WithMany("Carts")
                        .HasForeignKey("OrderId");

                    b.HasOne("EasyCommerce.Server.Shared.Persistence.Entities.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EasyCommerce.Server.Shared.Persistence.Entities.CategoryEntity", b =>
                {
                    b.HasOne("EasyCommerce.Server.Shared.Persistence.Entities.CategoryEntity", "Parent")
                        .WithMany("Childeren")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("EasyCommerce.Server.Shared.Persistence.Entities.CreditCardEntity", b =>
                {
                    b.HasOne("EasyCommerce.Server.Shared.Persistence.Entities.CustomerEntity", "Customer")
                        .WithMany("CreditCards")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("EasyCommerce.Server.Shared.Persistence.Entities.OrderEntity", b =>
                {
                    b.HasOne("EasyCommerce.Server.Shared.Persistence.Entities.AddressEntity", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("EasyCommerce.Server.Shared.Persistence.Entities.CargoCompanyEntity", "CargoCompany")
                        .WithMany()
                        .HasForeignKey("CargoCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyCommerce.Server.Shared.Persistence.Entities.CustomerEntity", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("CargoCompany");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("EasyCommerce.Server.Shared.Persistence.Entities.PriceEntity", b =>
                {
                    b.HasOne("EasyCommerce.Server.Shared.Persistence.Entities.ProductEntity", "Product")
                        .WithMany("Prices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyCommerce.Server.Shared.Persistence.Entities.TaxEntity", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("EasyCommerce.Server.Shared.Persistence.Entities.ProductEntity", b =>
                {
                    b.HasOne("EasyCommerce.Server.Shared.Persistence.Entities.CategoryEntity", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("EasyCommerce.Server.Shared.Persistence.Entities.CategoryEntity", b =>
                {
                    b.Navigation("Childeren");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("EasyCommerce.Server.Shared.Persistence.Entities.CustomerEntity", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("CreditCards");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("EasyCommerce.Server.Shared.Persistence.Entities.OrderEntity", b =>
                {
                    b.Navigation("Carts");
                });

            modelBuilder.Entity("EasyCommerce.Server.Shared.Persistence.Entities.ProductEntity", b =>
                {
                    b.Navigation("Prices");
                });
#pragma warning restore 612, 618
        }
    }
}
